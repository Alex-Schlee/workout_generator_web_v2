[{"C:\\Users\\Lex Schlee\\OneDrive\\Documents\\React\\workout_generator_web_v2\\src\\index.js":"1","C:\\Users\\Lex Schlee\\OneDrive\\Documents\\React\\workout_generator_web_v2\\src\\App.js":"2","C:\\Users\\Lex Schlee\\OneDrive\\Documents\\React\\workout_generator_web_v2\\src\\config.js":"3","C:\\Users\\Lex Schlee\\OneDrive\\Documents\\React\\workout_generator_web_v2\\src\\Configurations.js":"4","C:\\Users\\Lex Schlee\\OneDrive\\Documents\\React\\workout_generator_web_v2\\src\\Main.js":"5","C:\\Users\\Lex Schlee\\OneDrive\\Documents\\React\\workout_generator_web_v2\\src\\Workout.js":"6"},{"size":167,"mtime":1607739955149,"results":"7","hashOfConfig":"8"},{"size":1713,"mtime":1608602894290,"results":"9","hashOfConfig":"8"},{"size":458,"mtime":1607739925654,"results":"10","hashOfConfig":"8"},{"size":7691,"mtime":1609200262684,"results":"11","hashOfConfig":"8"},{"size":6119,"mtime":1609204426772,"results":"12","hashOfConfig":"8"},{"size":726,"mtime":1609196393029,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1ff3y9t",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Lex Schlee\\OneDrive\\Documents\\React\\workout_generator_web_v2\\src\\index.js",[],["28","29"],"C:\\Users\\Lex Schlee\\OneDrive\\Documents\\React\\workout_generator_web_v2\\src\\App.js",[],"C:\\Users\\Lex Schlee\\OneDrive\\Documents\\React\\workout_generator_web_v2\\src\\config.js",[],"C:\\Users\\Lex Schlee\\OneDrive\\Documents\\React\\workout_generator_web_v2\\src\\Configurations.js",[],"C:\\Users\\Lex Schlee\\OneDrive\\Documents\\React\\workout_generator_web_v2\\src\\Main.js",["30"],"import React from 'react';\r\nimport './App.css';\r\n\r\nimport Configurations from './Configurations';\r\nimport Workout from './Workout';\r\n\r\nconst _ = require('lodash');\r\n\r\nclass Main extends React.Component {\r\n    constructor(props){\r\n      super(props);\r\n      this.state = {\r\n        exercisesArray: [],\r\n        secondaryMap: new Map(),\r\n        muscleGroupArray: [],\r\n        templatesMap: new Map(),\r\n        templateIds: [],\r\n        selectedTemplateId: \"Body Weight\",\r\n        selectedTemplateTree: [],\r\n        builtWorkout: []\r\n      }\r\n    }\r\n  \r\n    handleTemplateSelectionClick(template){\r\n      this.setState({selectedTemplateId: template});\r\n      this.setState({selectedTemplateTree: this.state.templatesMap.get(template)})\r\n    }\r\n\r\n    handleTemplateUpdateClick(template){\r\n      this.setState({selectedTemplateTree: template})\r\n    }\r\n  \r\n    getTemplateData = () => {\r\n      var templateIds = [];\r\n      let templateMap = new Map();\r\n      this.props.firestore.collection(\"templates\").get().then((querySnapshot) => { //arrow function binds 'this' automatically\r\n        querySnapshot.forEach(function(doc) {\r\n          templateIds.push(doc.id);\r\n          templateMap.set(doc.id, doc.data());\r\n        });\r\n  \r\n        this.setState({templatesMap : templateMap});\r\n        this.setState({templateIds : templateIds});\r\n  \r\n        if(this.state.templateIds.indexOf(this.state.selectedTemplateId === -1))//if the selected template does not exist replace with first value\r\n          this.setState({selectedTemplateId : templateIds[0]});\r\n          this.setState({selectedTemplateTree: this.state.templatesMap.get(templateIds[0])})\r\n      });\r\n    }\r\n\r\n    getExerciseData = () => {\r\n      let exercisesArray = [];\r\n      var muslceGroupsTemp = [];\r\n      this.props.firestore.collection(\"exercises\").get().then((querySnapshot) => {\r\n        querySnapshot.forEach(function(doc) {\r\n          exercisesArray.push(doc.data());\r\n          var tempArray = doc.data().muscleGroup;\r\n          tempArray.map(group => muslceGroupsTemp.push(group));\r\n\r\n        });\r\n\r\n        muslceGroupsTemp.push(\"Random\"); \r\n        this.setState({muscleGroupArray: _.uniq(muslceGroupsTemp)}) //set available muscle groups\r\n        this.setState({exercisesArray : exercisesArray})\r\n      });\r\n    }\r\n\r\n    getExerciseDataByName = () => {\r\n      //TODO : make calls to database to match on exercise name, should be called in secondary situations\r\n    }\r\n\r\n    getSecondaryData = () =>{\r\n      let secondaryMap = new Map();\r\n      this.props.firestore.collection(\"secondaryExercises\").get().then((querySnapshot) => {\r\n        querySnapshot.forEach(function(doc) {\r\n          secondaryMap.set(doc.id, doc.data());\r\n        });\r\n\r\n        this.setState({secondaryMap: secondaryMap})\r\n      });\r\n    }\r\n  \r\n    componentDidMount() {\r\n      this.getTemplateData();\r\n      this.getExerciseData();\r\n      this.getSecondaryData();\r\n    }\r\n  \r\n\r\n    buildWorkout(){\r\n      var workoutArray = [];\r\n      const template = _.omit(this.state.selectedTemplateTree, ['equipmentList']);\r\n      for(let section in template){\r\n        for(let component in template[section])\r\n        {\r\n          var exercise;\r\n          var secondary;\r\n          //could refactor this into another function to clean it up\r\n          var tempExercisesArray = []\r\n          var tempSecondaryArray = []\r\n\r\n\r\n          tempExercisesArray = _.filter(this.state.exercisesArray, function(exercise) {return exercise.muscleGroup.includes(template[section][component].muscleGroup)})\r\n          tempExercisesArray = this.filterUsedExercises(tempExercisesArray, workoutArray);\r\n\r\n          if(template[section][component].exerciseName !== \"\") //check if specific exercise is set \r\n            exercise = template[section][component]\r\n          else\r\n            exercise = tempExercisesArray[Math.floor(Math.random() * tempExercisesArray.length)]\r\n\r\n          workoutArray.push(exercise);\r\n\r\n          if(template[section][component].secondaries)\r\n          {\r\n            tempSecondaryArray = this.state.secondaryMap.get(exercise.exerciseName).secondaryList;\r\n            tempSecondaryArray = _.filter(this.state.exercisesArray, function(exercise) {return tempSecondaryArray.includes(exercise.exerciseName)});\r\n            tempSecondaryArray = this.filterUsedExercises(tempSecondaryArray, workoutArray);\r\n            secondary = tempSecondaryArray[Math.floor(Math.random() * tempSecondaryArray.length)];\r\n            workoutArray.push(secondary);\r\n          }\r\n        }\r\n      }\r\n      this.setState({builtWorkout: workoutArray});\r\n    }\r\n\r\n    filterUsedExercises(tempExercisesArray, workoutArray){\r\n      var filteredExercises = [];\r\n      for(var unusedEx in tempExercisesArray){\r\n        var dupe = false;\r\n        //As much as I hate nested loops this must stay, unless I can find a method to search objects with properties equaling specific values\r\n        for(var usedEx in workoutArray)\r\n        {  \r\n          if(workoutArray[usedEx] !== undefined && workoutArray[usedEx].exerciseName.indexOf(tempExercisesArray[unusedEx].exerciseName) !== -1)\r\n          dupe = true;\r\n        }\r\n        \r\n        if(dupe === false)\r\n          filteredExercises.push(tempExercisesArray[unusedEx]);\r\n      }\r\n      return filteredExercises\r\n    }\r\n\r\n\r\n\r\n  \r\n  \r\n    render(){\r\n      return ( \r\n        <div className=\"Main\">\r\n          <Configurations \r\n            muscleGroupArray={this.state.muscleGroupArray}\r\n            selectedTemplateId={this.state.selectedTemplateId} \r\n            templateIds={this.state.templateIds} \r\n            selectedTemplateTree={this.state.selectedTemplateTree}\r\n\r\n            updateSelectedTemplate={template => this.handleTemplateSelectionClick(template)}\r\n            updateTemplateComponent={template => this.handleTemplateUpdateClick(template)}\r\n            onBuildWorkoutClick={ () => this.buildWorkout()}\r\n\r\n            exercisesArray={this.state.exercisesArray}\r\n            />\r\n          {this.state.builtWorkout !== undefined && <Workout builtWorkout={this.state.builtWorkout}/>}  \r\n        </div>\r\n    );\r\n  }\r\n  }\r\n\r\n  export default Main","C:\\Users\\Lex Schlee\\OneDrive\\Documents\\React\\workout_generator_web_v2\\src\\Workout.js",[],{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":116,"column":70,"nodeType":"37","messageId":"38","endLine":116,"endColumn":148},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'tempSecondaryArray'.","FunctionExpression","unsafeRefs","no-global-assign","no-unsafe-negation"]